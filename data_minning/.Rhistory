cat("\n")
cat("Indices of rows containing NAs: ")
cat(which(apply(is.na(dataF), 1, sum) > 0))
cat("\n")
cat("the mean and standart deviation of the column: ")
for(i in dataF %>% select_if(is.numeric) %>% names()) {       # for-loop over columns
cat(i, " (mean: ")
cat(mean(dataF[ , i], na.rm = TRUE), " std: ")
cat(sd(dataF[ , i], na.rm = TRUE), ") ")
}
cat("\n")
cat(str_c("For each logical column, the percentages of Trues and Falses: "))
dataF_logical = dataF %>% select_if(is.logical)
trues = apply(dataF_logical, 2, function(x) x==TRUE) %>% apply(2, sum)
cat(str_c(names(dataF_logical), ' (T: ', trues / nrow(dataF_logical) * 100, ' F: ', (nrow(dataF_logical) - trues)  / nrow(dataF_logical) * 100, ")"))
cat("\n")
cat(str_c("For each categorical column, the number of levels, and the names and frequencies of the top 3 most frequent levels, in descending order: ", "\n"))
dataF_categoric = dataF %>% select_if(is.factor)
for (n in names(dataF_categoric)){
col_each = dataF_categoric[[n]]
cat("#of levels in ", n, ": ", length(levels(col_each)), " ")
cat("frequencies of the top 3 most frequent levels: ")
sorted_freqs = sort(table(col_each), decreasing = TRUE)
selecteds = sorted_freqs[1:3]
cat(str_c(names(selecteds), "(", selecteds, ")"))
#print(selecteds)
cat("\n")
}
cat(str_c("For each pair of numerical columns, the correlation (Pearson) between them: ", "\n"))
dataF_numeric = dataF %>% select_if(is.numeric)
dataF_numeric = na.omit(dataF_numeric)
dataF_numeric_names = names(dataF_numeric)
for(i in c(1:ncol(dataF_numeric))) {
for(j in c(i:ncol(dataF_numeric))) {
if (i != j){
cat("Correlation of ", dataF_numeric_names[i], " and ", dataF_numeric_names[j] , ": ")
in1 = dataF_numeric[ , dataF_numeric_names[i]]
in2 = dataF_numeric[ , dataF_numeric_names[j]]
cat(cor(in1, in2, method = "pearson"))
cat("\n")
}
}
}
}
calculate(dataF2)
calculate <- function(dataF){
cat(str_c("Number of rows: ", nrow(dataF), "\n"))
cat(str_c("Number of columns: ", ncol(dataF), "\n"))
# print(str_c("Numeric columns: ", toString(names(select_if(dataF, is.numeric)))))
cat(str_c("Numeric columns: ", dataF %>% select_if(is.numeric) %>% names() %>% toString(), "\n"))
cat(str_c("Character columns: ", dataF %>% select_if(is.character) %>% names() %>% toString(), "\n"))
cat(str_c("Logical columns: ", dataF %>% select_if(is.logical) %>% names() %>% toString(), "\n"))
cat(str_c("Factor columns: ", dataF %>% select_if(is.factor) %>% names() %>% toString(), "\n"))
cat(str_c("Number of NAs in the data frame: ", sum(is.na(dataF))), "\n")
cat("Columns with NAs: ")
cat(str_c(names(dataF) , " (", apply(dataF, 2, function(x) length(which(is.na(x)))), ")"))
cat("\n")
cat("Indices of rows containing NAs: ")
cat(which(apply(is.na(dataF), 1, sum) > 0))
cat("\n")
cat("the mean and standart deviation of the column: ")
for(i in dataF %>% select_if(is.numeric) %>% names()) {       # for-loop over columns
cat(i, " (mean: ")
cat(mean(dataF[ , i], na.rm = TRUE), " std: ")
cat(sd(dataF[ , i], na.rm = TRUE), ") ")
}
cat("\n")
cat(str_c("For each logical column, the percentages of Trues and Falses: "))
dataF_logical = dataF %>% select_if(is.logical)
trues = apply(dataF_logical, 2, function(x) x==TRUE) %>% apply(2, sum)
cat(str_c(names(dataF_logical), ' (T: ', trues / nrow(dataF_logical) * 100, ' F: ', (nrow(dataF_logical) - trues)  / nrow(dataF_logical) * 100, ")"))
cat("\n")
# cat(str_c("For each categorical column, the number of levels, and the names and frequencies of the top 3 most frequent levels, in descending order: ", "\n"))
dataF_categoric = dataF %>% select_if(is.factor)
for (n in names(dataF_categoric)){
col_each = dataF_categoric[[n]]
cat("#of levels in ", n, ": ", length(levels(col_each)), " ")
cat("frequencies of the top 3 most frequent levels: ")
sorted_freqs = sort(table(col_each), decreasing = TRUE)
selecteds = sorted_freqs[1:3]
cat(str_c(names(selecteds), "(", selecteds, ")"))
#print(selecteds)
cat("\n")
}
# cat(str_c("For each pair of numerical columns, the correlation (Pearson) between them: ", "\n"))
dataF_numeric = dataF %>% select_if(is.numeric)
dataF_numeric = na.omit(dataF_numeric)
dataF_numeric_names = names(dataF_numeric)
for(i in c(1:ncol(dataF_numeric))) {
for(j in c(i:ncol(dataF_numeric))) {
if (i != j){
cat("Correlation of ", dataF_numeric_names[i], " and ", dataF_numeric_names[j] , ": ")
in1 = dataF_numeric[ , dataF_numeric_names[i]]
in2 = dataF_numeric[ , dataF_numeric_names[j]]
cat(cor(in1, in2, method = "pearson"))
cat("\n")
}
}
}
}
calculate(dataF2)
rm(list = ls())
gc()   # #free up memory and report the memory usage.
cat("\f")
library("dplyr")
library(stringr)
library(readr)
library(numbers)
library(tibble)
calculate <- function(dataF){
cat(str_c("Number of rows: ", nrow(dataF), "\n"))
cat(str_c("Number of columns: ", ncol(dataF), "\n"))
# print(str_c("Numeric columns: ", toString(names(select_if(dataF, is.numeric)))))
cat(str_c("Numeric columns: ", dataF %>% select_if(is.numeric) %>% names() %>% toString(), "\n"))
cat(str_c("Character columns: ", dataF %>% select_if(is.character) %>% names() %>% toString(), "\n"))
cat(str_c("Logical columns: ", dataF %>% select_if(is.logical) %>% names() %>% toString(), "\n"))
cat(str_c("Factor columns: ", dataF %>% select_if(is.factor) %>% names() %>% toString(), "\n"))
cat(str_c("Number of NAs in the data frame: ", sum(is.na(dataF))), "\n")
cat("Columns with NAs: ")
cat(str_c(names(dataF) , " (", apply(dataF, 2, function(x) length(which(is.na(x)))), ")"))
cat("\n")
cat("Indices of rows containing NAs: ")
cat(which(apply(is.na(dataF), 1, sum) > 0))
cat("\n")
cat("the mean and standart deviation of the column: ")
for(i in dataF %>% select_if(is.numeric) %>% names()) {       # for-loop over columns
cat(i, " (mean: ")
cat(mean(dataF[ , i], na.rm = TRUE), " std: ")
cat(sd(dataF[ , i], na.rm = TRUE), ") ")
}
cat("\n")
cat(str_c("For each logical column, the percentages of Trues and Falses: "))
dataF_logical = dataF %>% select_if(is.logical)
trues = apply(dataF_logical, 2, function(x) x==TRUE) %>% apply(2, sum)
cat(str_c(names(dataF_logical), ' (T: ', trues / nrow(dataF_logical) * 100, ' F: ', (nrow(dataF_logical) - trues)  / nrow(dataF_logical) * 100, ")"))
cat("\n")
# cat(str_c("For each categorical column, the number of levels, and the names and frequencies of the top 3 most frequent levels, in descending order: ", "\n"))
dataF_categoric = dataF %>% select_if(is.factor)
for (n in names(dataF_categoric)){
col_each = dataF_categoric[[n]]
cat("#of levels in ", n, ": ", length(levels(col_each)), " ")
cat("frequencies of the top 3 most frequent levels: ")
sorted_freqs = sort(table(col_each), decreasing = TRUE)
selecteds = sorted_freqs[1:3]
cat(str_c(names(selecteds), "(", selecteds, ")"))
#print(selecteds)
cat("\n")
}
# cat(str_c("For each pair of numerical columns, the correlation (Pearson) between them: ", "\n"))
dataF_numeric = dataF %>% select_if(is.numeric)
dataF_numeric = na.omit(dataF_numeric)
dataF_numeric_names = names(dataF_numeric)
for(i in c(1:ncol(dataF_numeric))) {
for(j in c(i:ncol(dataF_numeric))) {
if (i != j){
cat("Correlation of ", dataF_numeric_names[i], " and ", dataF_numeric_names[j] , ": ")
in1 = dataF_numeric[ , dataF_numeric_names[i]]
in2 = dataF_numeric[ , dataF_numeric_names[j]]
cat(cor(in1, in2, method = "pearson"))
cat("\n")
}
}
}
}
dataF2 <- data.frame(
X = c("g", "b", "dark", "p", "d", "b", "d", "ewdq", "dw", "dsw"),
Y = c(56, NA, 100, -10, NA, NA, 21, 241, 543, 8),
Z = c(5436, NA, 300, -4321, 3, NA, 43, 53, 5, 23),
K = c(TRUE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE),
L = c(FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE),
M = factor(c('A', 'A', 'B', 'B', 'C', 'A', 'C', 'C', 'C', 'D')),
N = factor(c('A', 'C', 'C', 'C', 'C', 'A', 'C', 'C', 'A', 'D'))
)
dataF2
calculate(dataF2)
# ---
# Ali Yunus Emre Ozkose
# 09.11.21
# CMP713 - Assignment1
# ---
rm(list = ls())
gc()   # #free up memory and report the memory usage.
cat("\f")
library("dplyr")
library(stringr)
library(readr)
library(numbers)
library(tibble)
calculate <- function(dataF){
cat(str_c("Number of rows: ", nrow(dataF), "\n"))
cat(str_c("Number of columns: ", ncol(dataF), "\n"))
# print(str_c("Numeric columns: ", toString(names(select_if(dataF, is.numeric)))))
cat(str_c("Numeric columns: ", dataF %>% select_if(is.numeric) %>% names() %>% toString(), "\n"))
cat(str_c("Character columns: ", dataF %>% select_if(is.character) %>% names() %>% toString(), "\n"))
cat(str_c("Logical columns: ", dataF %>% select_if(is.logical) %>% names() %>% toString(), "\n"))
cat(str_c("Factor columns: ", dataF %>% select_if(is.factor) %>% names() %>% toString(), "\n"))
cat(str_c("Number of NAs in the data frame: ", sum(is.na(dataF))), "\n")
cat("Columns with NAs: ")
cat(str_c(names(dataF) , " (", apply(dataF, 2, function(x) length(which(is.na(x)))), ")"))
cat("\n")
cat("Indices of rows containing NAs: ")
cat(which(apply(is.na(dataF), 1, sum) > 0))
cat("\n")
cat("the mean and standart deviation of the column: ")
for(i in dataF %>% select_if(is.numeric) %>% names()) {       # for-loop over columns
cat(i, " (mean: ")
cat(mean(dataF[ , i], na.rm = TRUE), " std: ")
cat(sd(dataF[ , i], na.rm = TRUE), ") ")
}
cat("\n")
cat(str_c("For each logical column, the percentages of Trues and Falses: "))
dataF_logical = dataF %>% select_if(is.logical)
trues = apply(dataF_logical, 2, function(x) x==TRUE) %>% apply(2, sum)
cat(str_c(names(dataF_logical), ' (T: ', trues / nrow(dataF_logical) * 100, ' F: ', (nrow(dataF_logical) - trues)  / nrow(dataF_logical) * 100, ")"))
cat("\n")
# cat(str_c("For each categorical column, the number of levels, and the names and frequencies of the top 3 most frequent levels, in descending order: ", "\n"))
dataF_categoric = dataF %>% select_if(is.factor)
for (n in names(dataF_categoric)){
col_each = dataF_categoric[[n]]
cat("#of levels in ", n, ": ", length(levels(col_each)), " ")
cat("frequencies of the top 3 most frequent levels: ")
sorted_freqs = sort(table(col_each), decreasing = TRUE)
selecteds = sorted_freqs[1:3]
cat(str_c(names(selecteds), "(", selecteds, ")"))
#print(selecteds)
cat("\n")
}
# cat(str_c("For each pair of numerical columns, the correlation (Pearson) between them: ", "\n"))
dataF_numeric = dataF %>% select_if(is.numeric)
dataF_numeric = na.omit(dataF_numeric)
dataF_numeric_names = names(dataF_numeric)
for(i in c(1:ncol(dataF_numeric))) {
for(j in c(i:ncol(dataF_numeric))) {
if (i != j){
cat("Correlation of ", dataF_numeric_names[i], " and ", dataF_numeric_names[j] , ": ")
in1 = dataF_numeric[ , dataF_numeric_names[i]]
in2 = dataF_numeric[ , dataF_numeric_names[j]]
cat(cor(in1, in2, method = "pearson"))
cat("\n")
}
}
}
}
dataF2 <- data.frame(
X = c("g", "b", "dark", "p", "d", "b", "d", "ewdq", "dw", "dsw"),
Y = c(56, NA, 100, -10, NA, NA, 21, 241, 543, 8),
Z = c(5436, NA, 300, -4321, 3, NA, 43, 53, 5, 23),
K = c(TRUE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE),
L = c(FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE),
M = factor(c('A', 'A', 'B', 'B', 'C', 'A', 'C', 'C', 'C', 'D')),
N = factor(c('A', 'C', 'C', 'C', 'C', 'A', 'C', 'C', 'A', 'D'))
)
dataF2
calculate(dataF2)
rm(list = ls())
gc()   # #free up memory and report the memory usage.
cat("\f")
library("dplyr")
library(stringr)
library(readr)
library(numbers)
library(tibble)
calculate <- function(dataF){
cat(str_c("Number of rows: ", nrow(dataF), "\n"))
cat(str_c("Number of columns: ", ncol(dataF), "\n"))
# print(str_c("Numeric columns: ", toString(names(select_if(dataF, is.numeric)))))
cat(str_c("Numeric columns: ", dataF %>% select_if(is.numeric) %>% names() %>% toString(), "\n"))
cat(str_c("Character columns: ", dataF %>% select_if(is.character) %>% names() %>% toString(), "\n"))
cat(str_c("Logical columns: ", dataF %>% select_if(is.logical) %>% names() %>% toString(), "\n"))
cat(str_c("Factor columns: ", dataF %>% select_if(is.factor) %>% names() %>% toString(), "\n"))
cat(str_c("Number of NAs in the data frame: ", sum(is.na(dataF))), "\n")
cat("Columns with NAs: ")
cat(str_c(names(dataF) , " (", apply(dataF, 2, function(x) length(which(is.na(x)))), ")"))
cat("\n")
cat("Indices of rows containing NAs: ")
cat(which(apply(is.na(dataF), 1, sum) > 0))
cat("\n")
cat("the mean and standart deviation of the column: ")
for(i in dataF %>% select_if(is.numeric) %>% names()) {       # for-loop over columns
cat(i, " (mean: ")
cat(mean(dataF[ , i], na.rm = TRUE), " std: ")
cat(sd(dataF[ , i], na.rm = TRUE), ") ")
}
cat("\n")
cat(str_c("For each logical column, the percentages of Trues and Falses: "))
dataF_logical = dataF %>% select_if(is.logical)
trues = apply(dataF_logical, 2, function(x) x==TRUE) %>% apply(2, sum)
cat(str_c(names(dataF_logical), ' (T: ', trues / nrow(dataF_logical) * 100, ' F: ', (nrow(dataF_logical) - trues)  / nrow(dataF_logical) * 100, ")"))
cat("\n")
# cat(str_c("For each categorical column, the number of levels, and the names and frequencies of the top 3 most frequent levels, in descending order: ", "\n"))
dataF_categoric = dataF %>% select_if(is.factor)
for (n in names(dataF_categoric)){
col_each = dataF_categoric[[n]]
cat("#of levels in ", n, ": ", length(levels(col_each)), " ")
cat("frequencies of the top 3 most frequent levels: ")
sorted_freqs = sort(table(col_each), decreasing = TRUE)
selecteds = sorted_freqs[1:3]
cat(str_c(names(selecteds), "(", selecteds, ")"))
#print(selecteds)
cat("\n")
}
# cat(str_c("For each pair of numerical columns, the correlation (Pearson) between them: ", "\n"))
dataF_numeric = dataF %>% select_if(is.numeric)
dataF_numeric = na.omit(dataF_numeric)
dataF_numeric_names = names(dataF_numeric)
for(i in c(1:ncol(dataF_numeric))) {
for(j in c(i:ncol(dataF_numeric))) {
if (i != j){
cat("Correlation of ", dataF_numeric_names[i], " and ", dataF_numeric_names[j] , ": ")
in1 = dataF_numeric[ , dataF_numeric_names[i]]
in2 = dataF_numeric[ , dataF_numeric_names[j]]
cat(cor(in1, in2, method = "pearson"))
cat("\n")
}
}
}
}
dataF2 <- data.frame(
X = c("g", "b", "dark", "p", "d", "b", "d", "ewdq", "dw", "dsw"),
Y = c(56, NA, 100, -10, NA, NA, 21, 241, 543, 8),
Z = c(5436, NA, 300, -4321, 3, NA, 43, 53, 5, 23),
K = c(TRUE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE),
L = c(FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE),
M = factor(c('A', 'A', 'B', 'B', 'C', 'A', 'C', 'C', 'C', 'D')),
N = factor(c('A', 'C', 'C', 'C', 'C', 'A', 'C', 'C', 'A', 'D'))
)
dataF2
calculate(dataF2)
dataF2 <- data.frame(
X = c("g", "b", "dark", "p", "d", "b", "d", "ewdq", "dw", "dsw"),
Y = c(56, NA, 100, -10, NA, NA, 21, 241, 543, 8),
Z = c(5436, NA, 300, -4321, 3, NA, 43, 53, 5, 23),
H = c(21, NA, 300, -4321, 3, NA, 43, 53, 5, 23),
K = c(TRUE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE),
L = c(FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE),
M = factor(c('A', 'A', 'B', 'B', 'C', 'A', 'C', 'C', 'C', 'D')),
N = factor(c('A', 'C', 'C', 'C', 'C', 'A', 'C', 'C', 'A', 'D'))
)
dataF2
calculate(dataF2)
ggplot(dataframe, aes=(x='wind speed')) + geom_histogram() + xlab("Wind Speed")
ggplot2(dataframe, aes=(x='wind speed')) + geom_histogram() + xlab("Wind Speed")
#
#
# Yunusemre Ozkose
# 11.12.21
#
library(readr)
library(ggplot2)
library("rstudioapi")
# set current directory as work-directory. R uses /home/username as work-directory.
current_dir = dirname(rstudioapi::getSourceEditorContext()$path)
setwd(current_dir)
# Read data
data_path = "../data/processed/combined_data_normalized.csv"
dataframe <- read_csv(data_path)
dataframe
ggplot(dataframe, aes=(x='wind speed')) + geom_histogram() + xlab("Wind Speed")
iris
ggplot(dataframe, aes=(x='wind speed')) + geom_histogram() + xlab(windspeed)
dataframe <- read_csv(data_path)
dataframe
ggplot(dataframe, aes=(x='wind speed')) + geom_histogram() + xlab(windspeed)
View(dataframe)
# Read data
data_path = "../data/processed/combined_data_normalized.csv"
dataframe <- read_csv(data_path)
dataframe
ggplot(dataframe, aes=(x='wind speed')) + geom_histogram() + xlab(windspeed)
ggplot(dataframe, aes=(x=windspeed)) + geom_histogram() + xlab("windspeed")
ggplot(dataframe, aes(x=windspeed)) + geom_histogram() + xlab("windspeed")
ggplot(dataframe, aes(x=windspeed)) + geom_histogram(binwidth = 30) + xlab("windspeed")
ggplot(dataframe, aes(x=windspeed)) + geom_histogram(binwidth = 10) + xlab("windspeed")
ggplot(dataframe, aes(x=windspeed)) + geom_histogram(binwidth = 1) + xlab("windspeed")
ggplot(dataframe, aes(x=windspeed)) + geom_histogram(binwidth = 0.1) + xlab("windspeed")
ggplot(dataframe, aes(x=windspeed)) + geom_histogram(binwidth = 0.01) + xlab("windspeed")
ggplot(dataframe, aes(x=windspeed)) + geom_histogram(binwidth = 0.02) + xlab("windspeed")
ggplot(dataframe, aes(x=windspeed)) + geom_histogram(binwidth = 0.09) + xlab("windspeed")
ggplot(dataframe, aes(x=windspeed)) + geom_histogram(binwidth = 0.05) + xlab("windspeed")
ggplot(dataframe, aes(x=windspeed)) + geom_boxplot() + xlab("") + ylab("windspeed")
ggplot(dataframe, aes(y=windspeed)) + geom_boxplot() + xlab("") + ylab("windspeed")
View(dataframe)
ggplot(dataframe, aes(x=h, y=windspeed)) + geom_boxplot() + xlab("h") + ylab("windspeed")
data(algae, package="DMwR2")
algae
##
data(algae, package="DMwR2")
algae
##
data(algae, package="DMwR2")
library(ggplot2)
library(grid)
library(DMwR2)
library(dplyr)
##
data(algae, package="DMwR2")
library(DMwR2)
install.packages("DMwR2")
##
data(algae, package="DMwR2")
algae
##
data(algae, package="DMwR2")
algae
##
algae <- read.table('Analysis.txt',
header=FALSE,
dec='.',
col.names=c('season','size','speed','mxPH','mnO2','Cl',
'NO3','NH4','oPO4','PO4','Chla','a1','a2','a3','a4',
'a5','a6','a7'),
na.strings=c('XXXXXXX'))
##
tibble::as_tibble(algae)
##
opts_template$set(onlyShow=list(echo=TRUE, eval=FALSE,  tidy=FALSE),
onlyRun=list(echo=FALSE, eval=TRUE, message=FALSE, warning=FALSE),
showFig=list(fig.width=6,fig.height=6,echo=FALSE, eval=TRUE, message=FALSE, warning=FALSE,out.width="0.7\\textwidth"),
showFig2=list(fig.width=12,fig.height=6,echo=FALSE, eval=TRUE, message=FALSE, warning=FALSE,out.width="0.9\\textwidth"),
runShow=list(echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE, tidy=FALSE))
##
data(algae, package="DMwR2")
summary(algae)
summary(dataframe)
ggplot(algae,aes(x=mxPH)) + geom_histogram(aes(y=..density..))
##
ggplot(algae,aes(x=mxPH)) +
geom_histogram(aes(y=..density..)) +
geom_density(color="red") + geom_rug() +
ggtitle("The Histogram of mxPH (maximum pH)") +
xlab("") + ylab("")
library(car)
install.packages("car")
library(car)
gh <- ggplot(algae,aes(x=mxPH)) + geom_histogram(aes(y=..density..)) + geom_density(color="red") + geom_rug() + ggtitle("The Histogram of mxPH (maximum pH)") + xlab("") + ylab("")
par(mfrow=c(1,2))
vpL <- viewport(height=unit(1, "npc"), width=unit(0.5, "npc"),
just="left",
y=0.5, x=0)
##
ggplot(algae,aes(x=factor(0),y=oPO4)) +
geom_boxplot() + geom_rug() +
geom_hline(aes(yintercept=mean(algae$oPO4, na.rm = TRUE)),
linetype=2,colour="red") +
ylab("Orthophosphate (oPO4)") + xlab("") + scale_x_discrete(breaks=NULL)
##
ggplot(algae,aes(x=factor(0),y=oPO4)) +
geom_boxplot() + geom_rug() +
geom_hline(aes(yintercept=mean(algae$oPO4, na.rm = TRUE)),linetype=2,colour="red") +
ylab("Orthophosphate (oPO4)") + xlab("") + scale_x_discrete(breaks=NULL)
##
plot(algae$NH4, xlab = "")
##
plot(algae$NH4, xlab = "")
abline(h = mean(algae$NH4, na.rm = T), lty = 1)
abline(h = mean(algae$NH4, na.rm = T) + sd(algae$NH4, na.rm = T), lty = 2)
abline(h = median(algae$NH4, na.rm = T), lty = 3)
identify(algae$NH4)
##
plot(algae$NH4, xlab = "")
clickedRows <- identify(algae$NH4)
algae[clickedRows, ]
##
library(dplyr)
filter(algae, NH4 > 19000)
##
ggplot(algae,aes(x=size,y=a1)) + geom_boxplot() +
xlab("River Size") + ylab("Algal A1")
##
library(forcats)
algae <- mutate(algae,
size=fct_relevel(size,c("small","medium","large")),
speed=fct_relevel(speed,c("low","medium","high")),
season=fct_relevel(season,c("spring","summer","autumn","winter")))
##
ggplot(algae,aes(x=size,y=a1)) + geom_boxplot() +
xlab("River Size") + ylab("Algal A1")
##
ggplot(algae,aes(x=size,y=a1)) + geom_boxplot() +
xlab("River Size") + ylab("Algal A1")
##
ggplot(algae,aes(x=size,y=a1)) +
geom_violin() + geom_jitter() + xlab("River Size") + ylab("Algal A1")
ggplot(dataframe, aes(x=h)) + geom_histogram() + xlab("h")
a <- dataframe[,ageGroup:=cut(h,
breaks=c(0.1,0.7,Inf),
include.lowest=TRUE,
labels=c("<0.1","0.1-0.7",">0.7"))]
dataframe[,hGroup] <- cut(h,
breaks=c(0.1,0.7,Inf),
include.lowest=TRUE,
labels=c("<0.1","0.1-0.7",">0.7"))
dataframe[,hGroup] <- cut(dataframe.h,
breaks=c(0.1,0.7,Inf),
include.lowest=TRUE,
labels=c("<0.1","0.1-0.7",">0.7"))
dataframe[,hGroup] <- cut(dataframe,
breaks=c(0.1,0.7,Inf),
include.lowest=TRUE,
labels=c("<0.1","0.1-0.7",">0.7"))
Categories <- cut(dataframe, breaks = c(-Inf,0.1,0.7,Inf), labels = c("<0.1","0.1-0.7",">0.7"))
Categories <- cut(dataframe, breaks = c(0.1,0.7,Inf), labels = c("<0.1","0.1-0.7",">0.7"))
Categories <- cut(dataframe, breaks = c(-Inf,0.1,0.7,Inf), labels = c("<0.1","0.1-0.7",">0.7"))
Categories <- cut(dataframe$h, breaks = c(-Inf,0.1,0.7,Inf), labels = c("<0.1","0.1-0.7",">0.7"))
Categories
dataframe$h_group <- cut(dataframe$h, breaks = c(-Inf,0.1,0.7,Inf), labels = c("<0.1","0.1-0.7",">0.7"))
View(dataframe)
ggplot(dataframe, aes(x=h, y=windspeed, color=h_group)) + geom_point()
ggplot(dataframe, aes(x=h, y=windspeed, color=h_group)) + geom_point() + facet_wrap(~ h_group)
install.packages("arules")
set.seed(1234)
library(arules)
